<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>raylee-blog</title>
  
  <subtitle>keep walking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rayleeafar.github.io/"/>
  <updated>2019-09-25T01:24:17.724Z</updated>
  <id>http://rayleeafar.github.io/</id>
  
  <author>
    <name>Ray Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python Sanic chrome CORS</title>
    <link href="http://rayleeafar.github.io/2019/07/19/yuque/Python%20Sanic%20chrome%20CORS/"/>
    <id>http://rayleeafar.github.io/2019/07/19/yuque/Python Sanic chrome CORS/</id>
    <published>2019-07-19T02:33:24.000Z</published>
    <updated>2019-09-25T01:24:17.724Z</updated>
    
    <content type="html"><![CDATA[<p><a name="sw2rh"></a></p><h1 id="使用sanic-框架-用vue-axiso发出请求在Chrome-的console-中报-Access-to-XMLHttpRequest-at-‘http-xxxxxxxx-39-from-origin-‘null’-has-been-blocked-by-CORS-policy-Request-header-field-content-type-is-not-allowed-by-Access-Control-Allow-Headers-in-preflight-response-和-‘Access-Control-Allow-Origin’-跨域问题"><a href="#使用sanic-框架-用vue-axiso发出请求在Chrome-的console-中报-Access-to-XMLHttpRequest-at-‘http-xxxxxxxx-39-from-origin-‘null’-has-been-blocked-by-CORS-policy-Request-header-field-content-type-is-not-allowed-by-Access-Control-Allow-Headers-in-preflight-response-和-‘Access-Control-Allow-Origin’-跨域问题" class="headerlink" title="使用sanic 框架 用vue-axiso发出请求在Chrome 的console 中报 Access to XMLHttpRequest at ‘http://xxxxxxxx&#39; from origin ‘null’ has been blocked by CORS policy: Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response. 和 ‘Access-Control-Allow-Origin’ 跨域问题"></a>使用sanic 框架 用vue-axiso发出请求在Chrome 的console 中报 Access to XMLHttpRequest at ‘<a href="http://xxxxxxxx&#39;" target="_blank" rel="noopener">http://xxxxxxxx&#39;</a> from origin ‘null’ has been blocked by CORS policy: Request header field content-type is not allowed by Access-Control-Allow-Headers in preflight response. 和 ‘Access-Control-Allow-Origin’ 跨域问题</h1><p>主要是chrome的安全限制跨站请求需要同源，或者就需要在服务端设置返回头以允许跨站请求。在sanic中，之间用中间件方法，对请求和返回进行统一添加头，对post前的option预检请求进行相应即可，具体代码片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.middleware('request')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">print_on_request</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'OPTIONS'</span>:</span><br><span class="line">        <span class="keyword">return</span> response.json(<span class="keyword">None</span>)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware('response')</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">prevent_xss</span><span class="params">(request, response)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'X-Error-Code'</span> <span class="keyword">not</span> <span class="keyword">in</span> dict(response.headers):</span><br><span class="line">        response.headers[<span class="string">'X-Error-Code'</span>] = <span class="number">0</span></span><br><span class="line">    response.headers[<span class="string">"Access-Control-Allow-Origin"</span>] = <span class="string">"*"</span></span><br><span class="line">    response.headers[<span class="string">"Access-Control-Allow-Headers"</span>] = <span class="string">"X-Custom-Header,content-type"</span></span><br></pre></td></tr></table></figure><p>参考资料：<br>    跨域资源共享 CORS 详解 ： <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a> <br>    Sanic 中间件 和 监听器 ：<a href="https://sanic-cn.readthedocs.io/zh/latest/sanic/middleware.html#" target="_blank" rel="noopener">https://sanic-cn.readthedocs.io/zh/latest/sanic/middleware.html#</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;sw2rh&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用sanic-框架-用vue-axiso发出请求在Chrome-的console-中报-Access-to-XMLHttpRequest-at-‘http-xxxxxxxx-39-from-origin-‘
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu Note --- upgrade python3.5 to python3.7 on ubuntu 16.04</title>
    <link href="http://rayleeafar.github.io/2019/04/03/yuque/Ubuntu%20Note%20---%20upgrade%20python3.5%20to%20python3.7%20on%20ubuntu%2016.04/"/>
    <id>http://rayleeafar.github.io/2019/04/03/yuque/Ubuntu Note --- upgrade python3.5 to python3.7 on ubuntu 16.04/</id>
    <published>2019-04-03T15:13:48.000Z</published>
    <updated>2019-09-25T01:24:17.724Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间一直用Windows写代码，用到了了一些python3.6+才有的语法特性，结果放到自己的服务器上跑不起来，手动编译安装了python3.7，运行的时候有些依赖依然解析到3.5上去了，无赖，查找升级系统的python版本</p><p>google出来的常用的<strong>错误办法</strong>就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:jonathonf/python-3.7</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3.7</span><br><span class="line"></span><br><span class="line">python3.7 -m pip install pipenv</span><br></pre></td></tr></table></figure></p><p> 结果依然报错<br>ImportError: cannot import name ‘sysconfig’ (Ubuntu 16.04)</p><p>google 良久，发现天坑，原来ppa:jonathonf的库有问题，用ppa:deadsnakes/ppa这个就完美升级了</p><p>再来一次，正确的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove python3.7</span><br><span class="line">sudo rm -rf /etc/apt/sources.list.d/jonathonf-ubuntu-python-3*</span><br><span class="line">sudo apt update</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3.7</span><br><span class="line"></span><br><span class="line">python3.7 -m pip install pipenv</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间一直用Windows写代码，用到了了一些python3.6+才有的语法特性，结果放到自己的服务器上跑不起来，手动编译安装了python3.7，运行的时候有些依赖依然解析到3.5上去了，无赖，查找升级系统的python版本&lt;/p&gt;
&lt;p&gt;google出来的常用的&lt;st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git Note--git submodule usage</title>
    <link href="http://rayleeafar.github.io/2019/03/19/yuque/Git%20Note--git%20submodule%20usage/"/>
    <id>http://rayleeafar.github.io/2019/03/19/yuque/Git Note--git submodule usage/</id>
    <published>2019-03-19T10:38:40.000Z</published>
    <updated>2019-09-25T01:24:17.732Z</updated>
    
    <content type="html"><![CDATA[<p><a name="a9633a38"></a></p><h2 id="Usage-of-git-submodule-command"><a href="#Usage-of-git-submodule-command" class="headerlink" title="Usage of git submodule command"></a>Usage of git submodule command</h2><p><a name="8a04ad0c"></a></p><h3 id="0x00-add-a-submodule-to-a-repo"><a href="#0x00-add-a-submodule-to-a-repo" class="headerlink" title="0x00 add a submodule to a repo"></a>0x00 add a submodule to a repo</h3><p>Sometimes our project may depends on other’s git project,so,how to handle this dependence in git ,just use git submodule</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/other/reponame reponame</span><br></pre></td></tr></table></figure><p>after this command , git will create a sub directory named <reponame> at current work directory,</reponame></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls reponame</span><br><span class="line"></span><br><span class="line">#you may see something or nothing,because old version git will not auto pull submodule repo</span><br><span class="line">#you can run the follow cmdline,manual pull submodule repo </span><br><span class="line"></span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p><a name="f7b8688a"></a></p><h3 id="0x01-clone-a-repo-with-it-submodule-repos"><a href="#0x01-clone-a-repo-with-it-submodule-repos" class="headerlink" title="0x01 clone a repo with it submodule repos"></a>0x01 clone a repo with it submodule repos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive &lt;project url&gt;</span><br></pre></td></tr></table></figure><p><a name="1eedaafc"></a></p><h3 id="0x02-more-useful-info"><a href="#0x02-more-useful-info" class="headerlink" title="0x02 more useful info"></a>0x02 more useful info</h3><p><a href="https://github.blog/2016-02-01-working-with-submodules/" target="_blank" rel="noopener">https://github.blog/2016-02-01-working-with-submodules/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;a9633a38&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Usage-of-git-submodule-command&quot;&gt;&lt;a href=&quot;#Usage-of-git-submodule-command&quot; class=&quot;headerlink&quot; title=&quot;U
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Algorithm Note --- 堆与栈</title>
    <link href="http://rayleeafar.github.io/2019/03/18/yuque/Algorithm%20Note%20---%20%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
    <id>http://rayleeafar.github.io/2019/03/18/yuque/Algorithm Note --- 堆与栈/</id>
    <published>2019-03-18T15:45:36.000Z</published>
    <updated>2019-09-25T01:24:17.732Z</updated>
    
    <content type="html"><![CDATA[<p><a name="141f3596"></a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>作为野生程序员，总是提到堆栈，堆栈，其实长久以来并不理解其真正的区别，今天深入学习之后，记录记录，加深记忆！！！</p><p><a name="a990b365"></a></p><h3 id="堆栈的区分"><a href="#堆栈的区分" class="headerlink" title="堆栈的区分"></a>堆栈的区分</h3><p><a name="b756be60"></a></p><h4 id="0x00、写代码的时候所说的堆与栈"><a href="#0x00、写代码的时候所说的堆与栈" class="headerlink" title="0x00、写代码的时候所说的堆与栈"></a>0x00、写代码的时候所说的堆与栈</h4><ul><li><strong>栈</strong>，一种<strong>先进后出（FILO）的数据结构</strong>，如同一个箱子，往里面放书进去，想要拿到箱子底部的那本书就必须把上面的书全部取出来之后才能拿到。</li><li><strong>堆</strong>, 一种<strong>经过排序的树形数据结构</strong>，每个结点都有一个值。通常我们所说的堆的数据结构，是指二叉堆。堆的特点是根结点的值最小或最大（因此也有最小堆和最大堆之分），且根结点的两个子树也是一个堆。由于堆的这个特性，常用来实现优先队列，堆的存取是随意，就像一栋大楼的不同单元，每层又像一个子树，知道楼栋单元号就可以直接去拜访，而不需要一层一层的找</li></ul><hr><p><a name="995d464c"></a></p><h4 id="0x01、计算机内存分配上所说的堆与栈–堆区与栈区"><a href="#0x01、计算机内存分配上所说的堆与栈–堆区与栈区" class="headerlink" title="0x01、计算机内存分配上所说的堆与栈–堆区与栈区"></a>0x01、计算机内存分配上所说的堆与栈–堆区与栈区</h4><p>以C语言程序内存分配为例，这里所说的堆和栈就是指计算机内存中的堆区和栈区，我们知道程序在运行时需要将代码拷贝到内存中执行，计算机系统会在内存中分配空间来分别存储代码运行时所需的不同信息：<br>栈区和堆区就是其中两个空间。除此之外，还有BSS段、数据段、代码段等分区。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1552962787020-69349847-7e3e-410e-9443-391832473e35.png#align=left&amp;display=inline&amp;height=418&amp;name=2474121-e6e531010176eb33.png&amp;originHeight=599&amp;originWidth=1070&amp;size=39270&amp;status=done&amp;width=746" alt="2474121-e6e531010176eb33.png"><br></p><ul><li><strong>栈区、作为内存中存储结构，通常存放程序临时创建的局部变量</strong>，即函数括大括号 “{ }” 中定义的变量，其中还包括函数调用时其形参，调用后的返回值等。 <strong>栈是由到高地址向低地址扩展的数据结构</strong>。即依次定义两个局部变量，首先定义的变量的地址是高地址，其次变量的地址是低地址。<strong>栈还具有“小内存、自动化、可能会溢出”的特点</strong>。栈顶的地址和栈的最大容量一般是系统预先规定好的，通常不会太大。由于栈中主要存放的是局部变量，而局部变量的占用的内存空间是其所在的代码段或函数段结束时由系统回收重新利用，所以栈的空间是循环利用自动管理的，一般不需要人为操作。如果某次局部变量申请的空间超过栈的剩余空间时就有可能出现 “栈的溢出”，进而导致意想不到的后果。所以一般不宜在栈中申请过大的空间，比如长度很大的数组、递归调用重复次数很多的函数等等。</li><li><strong>堆区</strong>、<strong>通常存放程序运行中动态分配的存储空间。堆是低地址向高地址扩展的数据结构，是一块不连续的内存区域。</strong>在标准C语言上，使用malloc等内存分配函数是从堆中分配内存的，在Objective-C中，使用new创建的对象也是从堆中分配内存的。<br><strong>堆具有“大内存、手工分配管理、申请大小随意、可能会泄露”的特点</strong>，堆内存是操作系统划分给堆管理器来管理的，管理器向使用者（用户进程）提供API（malloc和free等）来使用堆内存。需要程序员手动分配释放，如果程序员在使用完申请后的堆内存却没有及时把它释放掉，那么这块内存就丢失了（进程自身认为该内存没被使用，但是在堆内存记录中该内存仍然属于这个进程，所以当需要分配空间时又会重新去申请新的内存而不是重复利用这块内存），就是我们常说的-<strong>内存泄漏</strong>，所以内存泄漏指的是堆内存被泄露了。</li><li><strong>BSS段、</strong><br>Block Started by Symbol的简称，通常是指用来存放程序中未初始化的全局变量和静态变量。</li><li><strong>数据段、</strong> 通常是指用来存放程序中已初始化的全局变量和静态变量以及字符串常量</li><li><strong>代码段、</strong><br>通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定。<br><a name="02256044"></a><h4 id="0x03、典型关于各种变量在内存中分配位置的例子"><a href="#0x03、典型关于各种变量在内存中分配位置的例子" class="headerlink" title="0x03、典型关于各种变量在内存中分配位置的例子"></a>0x03、典型关于各种变量在内存中分配位置的例子</h4><blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;                  <span class="comment">// 全局初始化区</span></span><br><span class="line"><span class="keyword">char</span> p1;                    <span class="comment">// 全局未初始化区</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> b ;                 <span class="comment">// 栈</span></span><br><span class="line">      <span class="keyword">char</span> s[] = <span class="string">"abc"</span>;       <span class="comment">// 栈</span></span><br><span class="line">      <span class="keyword">char</span> p2 ;               <span class="comment">// 栈</span></span><br><span class="line">      <span class="keyword">char</span> p3 = <span class="string">"123456"</span>;     <span class="comment">// 123456在常量区，p3在栈上。</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">0</span> ;      <span class="comment">// 全局（静态）初始化区</span></span><br><span class="line">      p1 = (<span class="keyword">char</span> )<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">// 分配的10字节的区域就在堆区</span></span><br><span class="line">      p2 = (<span class="keyword">char</span> )<span class="built_in">malloc</span>(<span class="number">20</span>); <span class="comment">// 分配的20字节的区域就在堆区</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%p\n"</span>,p1);      <span class="comment">// 0xffffffb0</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%p\n"</span>,p2);      <span class="comment">// 0xffffffc0</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;                </span><br><span class="line"><span class="comment">//p1 变量的地址 0xffffffb0 比 p2 变量的地址 0xffffffc0 要小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><p><a name="044d05f6"></a></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://www.cnblogs.com/jiahuafu/p/8575044.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiahuafu/p/8575044.html</a><br><a href="">https://www.jianshu.com/p/b2380e47d005</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;141f3596&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;作为野生程序员，总是提到堆栈，堆栈，其实长久以来并不理解其真正的区别，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WIN10 专业版激活</title>
    <link href="http://rayleeafar.github.io/2019/02/16/yuque/WIN10%20%E4%B8%93%E4%B8%9A%E7%89%88%E6%BF%80%E6%B4%BB/"/>
    <id>http://rayleeafar.github.io/2019/02/16/yuque/WIN10 专业版激活/</id>
    <published>2019-02-16T04:24:34.000Z</published>
    <updated>2019-09-25T01:24:17.740Z</updated>
    
    <content type="html"><![CDATA[<p><a name="7e5fe70a"></a></p><h2 id="用管理员身份运行CMD"><a href="#用管理员身份运行CMD" class="headerlink" title="用管理员身份运行CMD"></a>用管理员身份运行CMD</h2><p><a name="534e6ce9"></a></p><h2 id="依次运行下面的命令"><a href="#依次运行下面的命令" class="headerlink" title="依次运行下面的命令"></a>依次运行下面的命令</h2><blockquote><p>slmgr.vbs /upk<br>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX<br>slmgr /skms zh.us.to<br>slmgr /ato</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;7e5fe70a&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;用管理员身份运行CMD&quot;&gt;&lt;a href=&quot;#用管理员身份运行CMD&quot; class=&quot;headerlink&quot; title=&quot;用管理员身份运行CMD&quot;&gt;&lt;/a&gt;用管理员身份运行CMD&lt;/h2&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级Ubuntu18.04的linux kernel(修复小米游戏本的触摸板驱动问题)</title>
    <link href="http://rayleeafar.github.io/2019/01/22/yuque/%E5%8D%87%E7%BA%A7Ubuntu18.04%E7%9A%84linux%20kernel(%E4%BF%AE%E5%A4%8D%E5%B0%8F%E7%B1%B3%E6%B8%B8%E6%88%8F%E6%9C%AC%E7%9A%84%E8%A7%A6%E6%91%B8%E6%9D%BF%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98)/"/>
    <id>http://rayleeafar.github.io/2019/01/22/yuque/升级Ubuntu18.04的linux kernel(修复小米游戏本的触摸板驱动问题)/</id>
    <published>2019-01-22T07:44:20.000Z</published>
    <updated>2019-09-25T01:24:17.740Z</updated>
    
    <content type="html"><![CDATA[<p><a name="141f3596"></a></p><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>前一段时间换电脑，置换了小米的游戏本，装了ubuntu18.04的系统，demesg发现一直报一个关于i2c接口的错误：</p><blockquote><p>[  473.518316] i2c_hid i2c-CUST0001:00: i2c_hid_get_input: incomplete report (14/65535)<br>[  473.518951] i2c_hid i2c-CUST0001:00: i2c_hid_get_input: incomplete report (14/65535)</p></blockquote><p>几经google，原来是小米游戏本用的触摸板模块驱动在我当前的Linux kernel版本上有兼容问题，遂升级内核。。。</p><p><a name="cd65cd60"></a></p><h2 id="一、下载ubuntu升级用的内核文件"><a href="#一、下载ubuntu升级用的内核文件" class="headerlink" title="一、下载ubuntu升级用的内核文件"></a>一、下载ubuntu升级用的内核文件</h2><p><a name="58d7d446"></a></p><h4 id="下载地址：https-kernel-ubuntu-com-kernel-ppa-mainline"><a href="#下载地址：https-kernel-ubuntu-com-kernel-ppa-mainline" class="headerlink" title="下载地址：https://kernel.ubuntu.com/~kernel-ppa/mainline/"></a>下载地址：<a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a></h4><blockquote><blockquote><blockquote><p>uname -a<br>Linux ray-ubuntu 4.15.0-44-generic #47-Ubuntu SMP Mon Jan 14 11:26:59 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</p></blockquote></blockquote></blockquote><ul><li><p>我当前系统的kernel版本是4.15,，我这个问题要安装&gt;=4.17的版本，找到一个v4.17.19的版本目录，进去：<img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1548143611331-4eb913ce-6738-40f2-96bd-42ba273532d8.png#align=left&amp;display=inline&amp;height=545&amp;name=Screenshot%20from%202019-01-22%2015-53-06.png&amp;originHeight=545&amp;originWidth=717&amp;size=122414&amp;width=717" alt="Screenshot from 2019-01-22 15-53-06.png"></p></li><li><p>下载对应系统版本的kernel deb包：</p><blockquote><p>linux-headers-VERSION-NUMBER_all.deb<br>linux-headers-VERSION-NUMBER_amd64.deb<br>linux-image-VERSION-NUMBER_amd64.deb<br>linux-modules-VERSION-NUMBER_amd64.deb</p></blockquote></li></ul><p>至于你是下low-latency 还是 generic的版本，看你的想法了，<br>可以参考这个问答:<a href="https://askubuntu.com/questions/126664/why-choose-a-low-latency-kernel-over-a-generic-or-realtime-one" target="_blank" rel="noopener">https://askubuntu.com/questions/126664/why-choose-a-low-latency-kernel-over-a-generic-or-realtime-one</a><br>一般自用generic就行</p><p><a name="6bbc1c10"></a></p><h2 id="二、安装升级内核"><a href="#二、安装升级内核" class="headerlink" title="二、安装升级内核"></a>二、安装升级内核</h2><p>切换到你下载的这些文件的目录，最好用单独一个目录存放上面下载的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/folder/where/you/put/the/debs</span><br><span class="line">sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure></p><p><a name="3e39b5ac"></a></p><h2 id="三、重启开始工作在新内核"><a href="#三、重启开始工作在新内核" class="headerlink" title="三、重启开始工作在新内核"></a>三、重启开始工作在新内核</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade &amp;&amp; sudo reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;141f3596&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;前一段时间换电脑，置换了小米的游戏本，装了ubuntu18.04的系统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>腾讯云服务器(CVM主机 Ubuntu系统)一个弹性网卡绑定多个IP地址的方法</title>
    <link href="http://rayleeafar.github.io/2019/01/20/yuque/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8(CVM%E4%B8%BB%E6%9C%BA%20Ubuntu%E7%B3%BB%E7%BB%9F)%E4%B8%80%E4%B8%AA%E5%BC%B9%E6%80%A7%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9A%E5%A4%9A%E4%B8%AAIP%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://rayleeafar.github.io/2019/01/20/yuque/腾讯云服务器(CVM主机 Ubuntu系统)一个弹性网卡绑定多个IP地址的方法/</id>
    <published>2019-01-20T03:07:57.000Z</published>
    <updated>2019-09-25T01:24:17.740Z</updated>
    
    <content type="html"><![CDATA[<p><a name="add6c4c4"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>最近项目需求，需要多个外网ip地址，防止一些梯子或爬虫项目被封。又不想开多个云服务器，浪费资源，正好腾讯云的CVM的弹性网卡支持单网卡多辅助IP，遂以此出发，为云主机绑定了4个不同的外网IP，网上搜到的资源都是教配置Fedora系统的，我用的ubuntu16.04为服务器的系统，有点不同，所以记录下来，希望能对一些朋友有帮助～～</p><p><a name="78c19253"></a></p><h2 id="一、创建云主机并绑定弹性网卡"><a href="#一、创建云主机并绑定弹性网卡" class="headerlink" title="一、创建云主机并绑定弹性网卡"></a>一、创建云主机并绑定弹性网卡</h2><p>创建云主机后一定要将默认的网卡换成弹性网卡，在左边栏有弹性网卡，点开在CVM的对应地理区域创建弹性网卡，没有绑定会提示收费，点击绑定，选中相应的CVM主机就好，附上不同CVM配置能绑定的IP数量：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547954451888-f50ffe9b-968b-44e3-9c48-a207463ce77e.png#align=left&amp;display=inline&amp;height=355&amp;name=Screenshot%20from%202019-01-20%2011-20-41.png&amp;originHeight=810&amp;originWidth=1703&amp;size=201652&amp;width=746" alt="Screenshot from 2019-01-20 11-20-41.png"><br>我是1核2G，我绑定了4个IP，舒服，哈哈～～～<br>修改为弹性网卡后，CVM主机如下显示<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547957740589-36953495-9ad2-4fb1-8a29-043a222938b4.png#align=left&amp;display=inline&amp;height=90&amp;name=Screenshot%20from%202019-01-20%2011-21-59.png&amp;originHeight=223&amp;originWidth=1839&amp;size=62445&amp;width=746" alt="Screenshot from 2019-01-20 11-21-59.png"><br>主IP地址后面会出现<strong> 弹性 </strong>两个字哟～～</p><p><a name="b5d51401"></a></p><h2 id="二、为弹性网卡添加辅助ip"><a href="#二、为弹性网卡添加辅助ip" class="headerlink" title="二、为弹性网卡添加辅助ip"></a>二、为弹性网卡添加辅助ip</h2><p><a name="9beeb14b"></a></p><h4 id="1、先添加内网IP"><a href="#1、先添加内网IP" class="headerlink" title="1、先添加内网IP"></a>1、先添加内网IP</h4><p>点击创建的CVM实例名称，进入实例的详细信息页，选择详细页上的弹性网卡tab，进入到下面的页面<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547957755266-539f1446-0038-4c77-8ee0-dfc1a13d338c.png#align=left&amp;display=inline&amp;height=358&amp;name=Screenshot%20from%202019-01-20%2011-29-43.png&amp;originHeight=763&amp;originWidth=1591&amp;size=107012&amp;width=746" alt="Screenshot from 2019-01-20 11-29-43.png"><br>点击右上角分配内网IP，为此网卡添加辅助内网IP，我添加了如下三个，加上主网卡一共4个IP<br><a name="bb083122"></a></p><h4 id="2、为刚添加的内网IP分配外网IP"><a href="#2、为刚添加的内网IP分配外网IP" class="headerlink" title="2、为刚添加的内网IP分配外网IP"></a>2、为刚添加的内网IP分配外网IP</h4><p>添加完内网IP后，点击左侧菜单栏，到弹性网卡，就是最开始为CVM配置弹性网卡的页面，在CVM对应区域添加3个弹性ip，操作和第一步为CVM添加弹性ip一样，创建好就绑定到CVM上，完成后如下图:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547957769908-5eb0c302-8987-4c31-b16d-389bce97becd.png#align=left&amp;display=inline&amp;height=239&amp;name=Screenshot%20from%202019-01-20%2012-14-11.png&amp;originHeight=588&amp;originWidth=1837&amp;size=151535&amp;width=746" alt="Screenshot from 2019-01-20 12-14-11.png"><br>回到刚才实例详情页面就能看到之前添加的内网ip后面出现了刚才添加的公网ip了:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547957841912-82b94a43-ea74-4b66-9b1f-c323d44a08c6.png#align=left&amp;display=inline&amp;height=358&amp;name=Screenshot%20from%202019-01-20%2011-29-43.png&amp;originHeight=763&amp;originWidth=1591&amp;size=113734&amp;width=746" alt="Screenshot from 2019-01-20 11-29-43.png"><br>3、腾讯云控制台的操作就完成了</p><p><a name="1b46f6ea"></a></p><h2 id="三、Ubuntu系统上的多IP绑定配置"><a href="#三、Ubuntu系统上的多IP绑定配置" class="headerlink" title="三、Ubuntu系统上的多IP绑定配置"></a>三、Ubuntu系统上的多IP绑定配置</h2><p>配置相对Fedora是比较简单的:<br><a name="3866041e"></a></p><h4 id="1、禁用云主机的自动配置"><a href="#1、禁用云主机的自动配置" class="headerlink" title="1、禁用云主机的自动配置"></a>1、禁用云主机的自动配置</h4><p>查看网卡配置</p><blockquote><p>cat /etc/network/interfaces.d/50-cloud-init.cfg</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; cat /etc/network/interfaces.d/50-cloud-init.cfg</span><br><span class="line"></span><br><span class="line"># This file is generated from information provided by</span><br><span class="line"># the datasource.  Changes to it will not persist across an instance.</span><br><span class="line"># To disable cloud-init&apos;s network configuration capabilities, write a file</span><br><span class="line"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span><br><span class="line"># network: &#123;config: disabled&#125;</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure><p>上面写着要想自定义网络配置需要禁用掉自带的云初始化，方法是创建文件</p><blockquote><p>/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg</p></blockquote><p>并添加如下内容</p><blockquote><p>network: {config: disabled}</p></blockquote><p>那就照做就是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c &quot;echo &apos;network: &#123;config: disabled&#125;&apos; &gt; /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg&quot;</span><br></pre></td></tr></table></figure></p><p><a name="2a8212a0"></a></p><h4 id="2、手动配置我们的网卡信息"><a href="#2、手动配置我们的网卡信息" class="headerlink" title="2、手动配置我们的网卡信息"></a>2、手动配置我们的网卡信息</h4><p>主要是修改网络接口配置文件</p><blockquote><p>vim  /etc/network/interfaces</p></blockquote><p>需要的内容一定要照着控制台显示的各个内网IP填，网关和子网掩码用</p><blockquote><p>route</p></blockquote><p>查看确认，我一直以为子网掩码用255.255.255.0，结果我一看却是255.255.240.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; route</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         172.16.0.1      0.0.0.0         UG    0      0        0 eth0</span><br><span class="line">172.16.0.0      *               255.255.240.0   U     0      0        0 eth0</span><br></pre></td></tr></table></figure></p><p>添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">#source /etc/network/interfaces.d/* 注释掉原来的配置</span><br><span class="line"></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"># The primary network interface</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 172.16.0.6     #主网卡的内网IP</span><br><span class="line">netmask 255.255.240.0  #子网掩码</span><br><span class="line">gateway 172.16.0.1     #网关，一般为内网第一个.1的IP</span><br><span class="line"></span><br><span class="line"># more side ip</span><br><span class="line">auto eth0:1            #辅助IP的网卡名，自己定义，这样写比较表意</span><br><span class="line">iface eth0:1 inet static</span><br><span class="line">address 172.16.0.4     #辅助IP的内网IP</span><br><span class="line">netmask 255.255.240.0</span><br><span class="line">gateway 172.16.0.1</span><br><span class="line"></span><br><span class="line">auto eth0:2</span><br><span class="line">iface eth0:2 inet static</span><br><span class="line">address 172.16.0.8</span><br><span class="line">netmask 255.255.240.0</span><br><span class="line">gateway 172.16.0.1</span><br><span class="line"></span><br><span class="line">auto eth0:3</span><br><span class="line">iface eth0:3 inet static</span><br><span class="line">address 172.16.0.17</span><br><span class="line">netmask 255.255.240.0</span><br><span class="line">gateway 172.16.0.1</span><br></pre></td></tr></table></figure></p><p>保存退出，基本完工<br><a name="c93d622b"></a></p><h2 id="四、重启查看并测试"><a href="#四、重启查看并测试" class="headerlink" title="四、重启查看并测试"></a>四、重启查看并测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; ifconfig</span><br><span class="line">eth0      Link encap:Ethernet  HWaddr *********** </span><br><span class="line">          inet addr:172.16.0.6  Bcast:172.16.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:87641 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:87248 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:5342944 (5.3 MB)  TX bytes:5588316 (5.5 MB)</span><br><span class="line"></span><br><span class="line">eth0:1    Link encap:Ethernet  HWaddr ***********  </span><br><span class="line">          inet addr:172.16.0.4  Bcast:172.16.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">eth0:2    Link encap:Ethernet  HWaddr *********** </span><br><span class="line">          inet addr:172.16.0.8  Bcast:172.16.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">eth0:3    Link encap:Ethernet  HWaddr *********** </span><br><span class="line">          inet addr:172.16.0.17  Bcast:172.16.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1 </span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure><p>成功撒花，愉快的开始其它的业务吧～～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;add6c4c4&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言:&quot;&gt;&lt;/a&gt;前言:&lt;/h3&gt;&lt;p&gt;最近项目需求，需要多个外网ip地址，防止一些梯子或爬虫项目被封。又不想开多
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详细Hexo博客搭建：云端写作+自动构建+自动部署</title>
    <link href="http://rayleeafar.github.io/2019/01/17/yuque/%E8%AF%A6%E7%BB%86Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%9A%E4%BA%91%E7%AB%AF%E5%86%99%E4%BD%9C+%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA+%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://rayleeafar.github.io/2019/01/17/yuque/详细Hexo博客搭建：云端写作+自动构建+自动部署/</id>
    <published>2019-01-17T08:26:03.000Z</published>
    <updated>2019-09-25T01:24:17.720Z</updated>
    
    <content type="html"><![CDATA[<p><a name="435f48df"></a></p><h1 id="YuQue云端写作-Travis-ci自动构建-github-pages发布"><a href="#YuQue云端写作-Travis-ci自动构建-github-pages发布" class="headerlink" title="YuQue云端写作+Travis-ci自动构建+github-pages发布"></a>YuQue云端写作+Travis-ci自动构建+github-pages发布</h1><p><strong>序言：</strong>在网上看见Nero大神的一篇文章<a href="https://segmentfault.com/a/1190000017797561" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017797561</a>，简单讲述了如何构建一个云端写作自动部署到github pages的hexo 静态博客网站，之前我已经在github pages上搭建了一个博客，无奈觉得每次写作非常不方便，用代码编辑器vs code写md文档然后手动生成静态再部署，写作环境实在太差，之后便放弃直接在CSDN上写了。看到上面那篇文章，顿觉激动，在语雀这样方便的平台上编写文档，自动部署，简直爽翻，遂动手开干，花了半天的时间搞定。由于大神写的过于简略，途中遇到不少坑，遂填坑出一个完整的搭建流程</p><p><strong>结果：</strong></p><ul><li>我已搭建好的博客： <a href="https://rayleeafar.github.io/">https://rayleeafar.github.io/</a>  </li><li>发布博客静态页面的仓库： <a href="https://github.com/rayleeafar/rayleeafar.github.io" target="_blank" rel="noopener">https://github.com/rayleeafar/rayleeafar.github.io</a></li><li>博客源码的仓库： <a href="https://github.com/rayleeafar/rayleeafar-blog" target="_blank" rel="noopener">https://github.com/rayleeafar/rayleeafar-blog</a></li></ul><p>有问题可以参考源码里面的配置</p><p><a name="4efa5655"></a></p><h3 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h3><p><a name="33534374"></a></p><h4 id="一、GitHub-pages-Hexo-搭建初级个人博客"><a href="#一、GitHub-pages-Hexo-搭建初级个人博客" class="headerlink" title="一、GitHub pages + Hexo 搭建初级个人博客"></a>一、GitHub pages + Hexo 搭建初级个人博客</h4><p>参考文章：  </p><ul><li>初始化GitHub pages:  <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a>  </li><li>安装hexo及相关依赖:  <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li><li>在第一步的GH-pages仓库目录中初始化hexo: <a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a>  </li><li>开始写作: <a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a></li><li>部署到github pages: <a href="https://hexo.io/zh-cn/docs/deployment" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/deployment</a></li></ul><p><a name="6f916c59"></a></p><h4 id="二、GitHub-pages-Hexo-travis-ci-搭建中级-CI自动部署博客"><a href="#二、GitHub-pages-Hexo-travis-ci-搭建中级-CI自动部署博客" class="headerlink" title="二、GitHub pages + Hexo + travis-ci 搭建中级 CI自动部署博客"></a>二、GitHub pages + Hexo + travis-ci 搭建中级 CI自动部署博客</h4><p>主要步骤参考: <a href="https://segmentfault.com/a/1190000004667156#articleHeader1" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004667156#articleHeader1</a><br>其中需要注意的几点是:</p><ul><li><p>文章需要安装Ruby，才能使用gem 安装travis工具 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">gem install travis</span><br></pre></td></tr></table></figure></li><li><p>生成ssh-key的过程有点问题，按照文章ci部署的时候会报错 vi undefine，正确步骤是用以下命令登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/your/repo/.travis</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">travis login --pro #用github账号登录</span><br><span class="line">travis encrypt-file id_rsa --pro</span><br><span class="line">#得到  openssl aes-256-cbc -K $encrypted_xxxxxxxxxxx_key -iv $encrypted_xxxxxxxxxxx_iv</span><br><span class="line">#其中 id_rsa.enc的位置需要注意设置对</span><br></pre></td></tr></table></figure></li></ul><p>注意以上两个点，按照文章步骤申请travis账号开通repo权限就能完成部署了</p><p><a name="4b096a56"></a></p><h4 id="三、GitHub-pages-Hexo-travis-ci-YuQue-Serverless搭建高级-云端写作-gt-自动部署博客"><a href="#三、GitHub-pages-Hexo-travis-ci-YuQue-Serverless搭建高级-云端写作-gt-自动部署博客" class="headerlink" title="三、GitHub pages + Hexo + travis-ci + YuQue + Serverless搭建高级 云端写作-&gt;自动部署博客"></a>三、GitHub pages + Hexo + travis-ci + YuQue + Serverless搭建高级 云端写作-&gt;自动部署博客</h4><p>步骤参考文章:</p><ul><li><a href="https://segmentfault.com/a/1190000017797561" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017797561</a></li></ul><p>按照大神的文章走，主要注意以下几点，找到并设置对各个参数</p><ul><li>YuQue-hexo库的使用  <a href="https://github.com/x-cold/yuque-hexo" target="_blank" rel="noopener">https://github.com/x-cold/yuque-hexo</a></li><li>修改package.json，增加配置:  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"yuqueConfig"</span>: &#123;</span><br><span class="line">  <span class="string">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">  <span class="string">"login"</span>: <span class="string">"rayleeafar"</span>,<span class="comment">#填写你的语雀账号名称</span></span><br><span class="line">  <span class="string">"repo"</span>: <span class="string">"gg272k"</span>,<span class="comment">#填写在语雀上创建的文章仓库的编号一般是几个字母数字，你也可以自己改，下图中路径最后的那个值</span></span><br><span class="line">  <span class="string">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">  <span class="string">"postPath"</span>: <span class="string">"source/_posts/yuque"</span></span><br><span class="line">&#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"sync"</span>: <span class="string">"yuque-hexo sync"</span>,</span><br><span class="line">  <span class="string">"clean:yuque"</span>: <span class="string">"yuque-hexo clean"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"npm run sync &amp;&amp; hexo clean &amp;&amp; hexo g -d"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><img src="https://cdn.nlark.com/yuque/0/2019/png/247315/1547704531539-87c973b8-fa2f-4d8f-bc18-1f9b2c7d796c.png#align=left&amp;display=inline&amp;height=423&amp;name=Screenshot%20from%202019-01-17%2013-55-04.png&amp;originHeight=722&amp;originWidth=1199&amp;size=47422&amp;width=703" alt="Screenshot from 2019-01-17 13-55-04.png"><br><a name="90e7bd5b"></a></p><h5 id="serverless-函数中参数的设置"><a href="#serverless-函数中参数的设置" class="headerlink" title="* serverless 函数中参数的设置:"></a>* serverless 函数中参数的设置:</h5><p>文章中说用postman发个请求，也可以用curl: <br>再返回的数据中找到repo的id，我的是：7596310<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; curl -H &quot;Travis-API-Version: 3&quot; -H &quot;User-Agent: API Explorer&quot; \ -H &quot;Authorization: token &lt;your_token&gt;&quot; \ https://api.travis-ci.org/owner/&lt;your_name&gt;/repos</span><br><span class="line">#curl的返回信息</span><br><span class="line">......</span><br><span class="line">  &quot;repositories&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@type&quot;: &quot;repository&quot;,</span><br><span class="line">      &quot;@href&quot;: &quot;/repo/7596310&quot;,</span><br><span class="line">      &quot;@representation&quot;: &quot;standard&quot;,</span><br><span class="line">      &quot;@permissions&quot;: &#123;</span><br><span class="line">        &quot;read&quot;: true,</span><br><span class="line">        &quot;migrate&quot;: true,</span><br><span class="line">        &quot;star&quot;: true,</span><br><span class="line">        &quot;unstar&quot;: true,</span><br><span class="line">        &quot;create_cron&quot;: true,</span><br><span class="line">        &quot;create_env_var&quot;: true,</span><br><span class="line">        &quot;create_key_pair&quot;: true,</span><br><span class="line">        &quot;delete_key_pair&quot;: true,</span><br><span class="line">        &quot;create_request&quot;: true,</span><br><span class="line">        &quot;admin&quot;: true,</span><br><span class="line">        &quot;activate&quot;: true,</span><br><span class="line">        &quot;deactivate&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;id&quot;: 7596310,</span><br><span class="line">      &quot;name&quot;: &quot;rayleeafar-blog&quot;,</span><br><span class="line">      &quot;slug&quot;: &quot;rayleeafar/rayleeafar-blog&quot;,</span><br><span class="line">      &quot;description&quot;: null,</span><br><span class="line">      &quot;github_id&quot;: 166050465,</span><br><span class="line">      &quot;github_language&quot;: null,</span><br><span class="line">      &quot;active&quot;: true,</span><br><span class="line">      &quot;private&quot;: false,</span><br><span class="line">      &quot;owner&quot;: &#123;</span><br><span class="line">        &quot;@type&quot;: &quot;user&quot;,</span><br><span class="line">        &quot;id&quot;: 1254643,</span><br><span class="line">        &quot;login&quot;: &quot;rayleeafar&quot;,</span><br><span class="line">        &quot;@href&quot;: &quot;/user/1254643&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>我申请的是腾讯的serverless服务，在腾讯云上注册登录，创建函数服务:</p><p>  用下面这个函数，作者的那个里面 有个接口地址有点不同，我抓travis看到接口URL是另一个：</p><blockquote><p>curl_setopt($curl, CURLOPT_URL, ‘<strong><a href="https://api.travis-ci.com" target="_blank" rel="noopener">https://api.travis-ci.com</a></strong>/repo/‘.$repos.’/requests’);</p></blockquote></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_handler</span><span class="params">($event, $context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 解析语雀post的数据</span></span><br><span class="line">    $update_title = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>($event-&gt;body)&#123;</span><br><span class="line">        $yuque_data= json_decode($event-&gt;body);</span><br><span class="line">        $update_title .= $yuque_data-&gt;data-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// default params</span></span><br><span class="line">    $repos = <span class="string">'7596310'</span>;  <span class="comment">// 你的仓库id 或 slug</span></span><br><span class="line">    $token = <span class="string">'yJsKEMoSNUmQSv9kLFsbvg'</span>; <span class="comment">// 你的登录token</span></span><br><span class="line">    $message = date(<span class="string">"Y/m/d"</span>).<span class="string">':yuque update:'</span>.$update_title;</span><br><span class="line">    $branch = <span class="string">'master'</span>;</span><br><span class="line">    <span class="comment">// post params</span></span><br><span class="line">    $queryString = $event-&gt;queryString;</span><br><span class="line">    $q_token = $queryString-&gt;token ? $queryString-&gt;token : $token;</span><br><span class="line">    $q_repos = $queryString-&gt;repos ? $queryString-&gt;repos : $repos;</span><br><span class="line">    $q_message = $queryString-&gt;message ? $queryString-&gt;message : $message;</span><br><span class="line">    $q_branch = $queryString-&gt;branch ? $queryString-&gt;branch : <span class="string">'master'</span>;</span><br><span class="line">    <span class="keyword">echo</span>($q_token);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> ($q_repos);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> ($q_message);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> ($q_branch);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="comment">//request travis ci</span></span><br><span class="line">    $res_info = triggerTravisCI($q_repos, $q_token, $q_message, $q_branch);</span><br><span class="line"></span><br><span class="line">    $res_code = <span class="number">0</span>;</span><br><span class="line">    $res_message = <span class="string">'未知'</span>;</span><br><span class="line">    <span class="keyword">if</span>($res_info[<span class="string">'http_code'</span>])&#123;</span><br><span class="line">        $res_code = $res_info[<span class="string">'http_code'</span>];</span><br><span class="line">        <span class="keyword">switch</span>($res_info[<span class="string">'http_code'</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">202</span>:</span><br><span class="line">                $res_message = <span class="string">'success'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $res_message = <span class="string">'faild'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $res = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'status'</span>=&gt;$res_code,</span><br><span class="line">        <span class="string">'message'</span>=&gt;$res_message</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> $res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  travis api , trigger a build</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $repos string 仓库ID、slug</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $token string 登录验证token</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $message string 触发信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $branch string 分支</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $info array 回包信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerTravisCI</span> <span class="params">($repos, $token, $message=<span class="string">'yuque update'</span>, $branch=<span class="string">'master'</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    $curl = curl_init();</span><br><span class="line">    <span class="comment">//设置抓取的url https://api.travis-ci.com/repo/7596310/requests</span></span><br><span class="line">    curl_setopt($curl, CURLOPT_URL, <span class="string">'https://api.travis-ci.com/repo/'</span>.$repos.<span class="string">'/requests'</span>);</span><br><span class="line">    <span class="comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置post方式提交</span></span><br><span class="line">    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, <span class="string">"POST"</span>);</span><br><span class="line">    <span class="comment">//设置post数据</span></span><br><span class="line">    $post_data = json_encode(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"request"</span>=&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"message"</span>=&gt;$message,</span><br><span class="line">            <span class="string">"branch"</span>=&gt;$branch</span><br><span class="line">        )</span><br><span class="line">    ));</span><br><span class="line">    $header = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">'Content-Type: application/json'</span>,</span><br><span class="line">      <span class="string">'Travis-API-Version: 3'</span>,</span><br><span class="line">      <span class="string">'Authorization:token '</span>.$token,</span><br><span class="line">      <span class="string">'Content-Length:'</span> . strlen($post_data)</span><br><span class="line">    );</span><br><span class="line">    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);</span><br><span class="line">    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);</span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    $data = curl_exec($curl);</span><br><span class="line">    $info = curl_getinfo($curl);</span><br><span class="line">    <span class="comment">//关闭URL请求</span></span><br><span class="line">    curl_close($curl);</span><br><span class="line">    <span class="keyword">return</span> $info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>按照文章的步骤创建并填对参数应该就事成一大半了</li></ul><p><a name="ae5a7981"></a></p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>按照上述文章及注意的点走完，试试在语雀上写个文章并发布，登录serverless看看hook有没有触发，登录travis-ci看看构建是否成功，有问题留言联系呀～～<br>祝各位写作愉快～～～～～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a name=&quot;435f48df&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;YuQue云端写作-Travis-ci自动构建-github-pages发布&quot;&gt;&lt;a href=&quot;#YuQue云端写作-Travis-ci自动构建-github-pages发布&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
</feed>
